=== List ADT 时间复杂度分析 ===

1. 顺序数组实现 (ArrayListImpl)
   优点：
   - 随机访问速度快 O(1)
   - 内存连续，缓存友好
   - 实现简单直观
   缺点：
   - 插入/删除需要移动元素 O(n)
   - 固定容量，可能浪费空间
   - 动态扩容成本高

2. 单向链表实现 (SinglyLinkedListImpl)
   优点：
   - 插入/删除操作快 O(1)
   - 动态大小，节省空间
   - 不需要预分配空间
   缺点：
   - 不能随机访问
   - 反向遍历需要 O(n) 时间
   - 额外的指针存储开销

3. 双向链表实现 (DoublyLinkedListImpl)
   优点：
   - 插入/删除操作快 O(1)
   - 双向遍历都很快 O(1)
   - 动态大小，节省空间
   缺点：
   - 不能随机访问
   - 额外的指针存储开销（比单向链表多一倍）
   - 实现复杂度稍高

=== 详细时间复杂度分析 ===

insert():
  顺序数组: O(n) - 需要移动光标后的所有元素
  单向链表: O(1) - 直接在光标后插入新节点
  双向链表: O(1) - 直接在光标后插入新节点

remove():
  顺序数组: O(n) - 需要移动光标后的所有元素
  单向链表: O(1) - 直接删除光标指向的节点
  双向链表: O(1) - 直接删除光标指向的节点

gotoEnd():
  顺序数组: O(1) - 直接访问 size-1 位置
  单向链表: O(n) - 需要从头遍历到尾
  双向链表: O(1) - 直接访问 tail 指针

gotoPrev():
  顺序数组: O(1) - 直接访问 cursor-1 位置
  单向链表: O(n) - 需要从头遍历到光标前一个节点
  双向链表: O(1) - 直接访问 prev 指针

moveToNth():
  顺序数组: O(n) - 需要移动元素到指定位置
  单向链表: O(n) - 需要遍历到指定位置
  双向链表: O(n) - 需要遍历到指定位置